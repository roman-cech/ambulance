/*
 * Waiting List API
 *
 * Ambulance Waiting List managegement for Web In Cloud system
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: aa@bb.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using eu.incloud.ambulance.Attributes;

using Microsoft.AspNetCore.Authorization;
using eu.incloud.ambulance.Models;
using eu.incloud.ambulance.Services;
using System.Linq;

namespace eu.incloud.ambulance.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AdminsApiController : ControllerBase
    { 
        private readonly IDataRepository repository;

        /// <summary/>
        public AdminsApiController(IDataRepository repository)
            => this.repository = repository;

        
        /// <summary>
        /// Creates new ambulance
        /// </summary>
        /// <remarks>Stores new ambulance.</remarks>
        /// <param name="body">Ambulance template</param>
        /// <param name="ambulanceId">pass the ambulanceId of the particular ambulance</param>
        /// <response code="200">ambulance create</response>
        /// <response code="403">Ambulance with such ID already exists</response>
        [HttpPost]
        [Route("/api/waiting-list/{ambulanceId}")]
        [ValidateModelState]
        [SwaggerOperation("CreateAmbulanceDetails")]
        public virtual IActionResult CreateAmbulanceDetails([FromBody]Ambulance body, [FromRoute][Required]string ambulanceId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //CHANGE TO
            var ambulance = this.repository.GetAmbulanceData(ambulanceId);
            if(ambulance != null) { return new BadRequestResult(); }
            this.repository.UpsertAmbulanceData(body);
            return new OkResult();
        }

        /// <summary>
        /// Deletes specific associated condition
        /// </summary>
        /// <remarks>Use this method to delete the specific condition from the list of associated predefined conditions for this ambulance</remarks>
        /// <param name="ambulanceId">pass the id of the particular ambulance</param>
        /// <param name="conditionCode">pass the code of the particular condition</param>
        /// <response code="200">Item deleted</response>
        /// <response code="404">Ambulance with such ID or Condition with such code does not exists</response>
        [HttpDelete]
        [Route("/api/waiting-list/{ambulanceId}/condition/{conditionCode}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteCondition")]
        public virtual IActionResult DeleteCondition([FromRoute][Required]string ambulanceId, [FromRoute][Required]string conditionCode)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //CHANGE TO
            var ambulance = this.repository.GetAmbulanceData(ambulanceId);
            var condition = ambulance == null ? null
                : ambulance.PredefinedConditions.FirstOrDefault(
                    _ => _.Code.Equals(conditionCode));

            if( condition == null) { return new NotFoundResult(); }

            ambulance.PredefinedConditions.Remove(condition);
            this.repository.UpsertAmbulanceData(ambulance);

            return new OkResult();
        }

        /// <summary>
        /// Saves new predefined condition
        /// </summary>
        /// <remarks>Use this method to associate new predefined condition with the ambulance</remarks>
        /// <param name="body">Associated condition</param>
        /// <param name="ambulanceId">pass the id of the particular ambulance</param>
        /// <response code="200">Value was stored</response>
        /// <response code="400">Missing mandatory properties of input object.</response>
        /// <response code="404">Ambulance with such ID does not exists</response>
        [HttpPost]
        [Route("/api/waiting-list/{ambulanceId}/condition")]
        [ValidateModelState]
        [SwaggerOperation("StoreCondition")]
        public virtual IActionResult StoreCondition([FromBody]Condition body, [FromRoute][Required]string ambulanceId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //CHANGE TO 
             var ambulance = this.repository.GetAmbulanceData(ambulanceId);
            if( ambulance == null) { return new NotFoundResult(); }

            ambulance.PredefinedConditions.Add(body);
            this.repository.UpsertAmbulanceData(ambulance);

            return new OkResult();
        }
    }
}
