/*
 * Waiting List API
 *
 * Ambulance Waiting List managegement for Web In Cloud system
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: aa@bb.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using LiteDB;

namespace eu.incloud.ambulance.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Ambulance : IEquatable<Ambulance>
    { 
        ///
        public string OpeningTime {get; set;}

        /// <summary>
        /// Unique identifier of the ambulance
        /// </summary>
        /// <value>Unique identifier of the ambulance</value>
        [Required]
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Human readable display name of the ambulance
        /// </summary>
        /// <value>Human readable display name of the ambulance</value>
        [Required]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RoomNumber
        /// </summary>
        [Required]
        [DataMember(Name="roomNumber")]
        public string RoomNumber { get; set; }

        /// <summary>
        /// Gets or Sets WaitingList
        /// </summary>
        [DataMember(Name="waitingList")]
        public List<WaitingListEntry> WaitingList { get; set; }

        /// <summary>
        /// Gets or Sets PredefinedConditions
        /// </summary>
        [DataMember(Name="predefinedConditions")]
        public List<Condition> PredefinedConditions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ambulance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RoomNumber: ").Append(RoomNumber).Append("\n");
            sb.Append("  WaitingList: ").Append(WaitingList).Append("\n");
            sb.Append("  PredefinedConditions: ").Append(PredefinedConditions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Ambulance)obj);
        }

        /// <summary>
        /// Returns true if Ambulance instances are equal
        /// </summary>
        /// <param name="other">Instance of Ambulance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ambulance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    RoomNumber == other.RoomNumber ||
                    RoomNumber != null &&
                    RoomNumber.Equals(other.RoomNumber)
                ) && 
                (
                    WaitingList == other.WaitingList ||
                    WaitingList != null &&
                    WaitingList.SequenceEqual(other.WaitingList)
                ) && 
                (
                    PredefinedConditions == other.PredefinedConditions ||
                    PredefinedConditions != null &&
                    PredefinedConditions.SequenceEqual(other.PredefinedConditions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (RoomNumber != null)
                    hashCode = hashCode * 59 + RoomNumber.GetHashCode();
                    if (WaitingList != null)
                    hashCode = hashCode * 59 + WaitingList.GetHashCode();
                    if (PredefinedConditions != null)
                    hashCode = hashCode * 59 + PredefinedConditions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Ambulance left, Ambulance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Ambulance left, Ambulance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators

         ///
        [BsonIgnore]
        [IgnoreDataMember]
         private TimeSpan OpeningTimeSpan
         {
            get => this.ParseTimeSpan(this.OpeningTime);
            set => this.OpeningTime = this.FormatTimeSpan(value);
         }

        private TimeSpan ParseTimeSpan(string value)
        {
            if(string.IsNullOrWhiteSpace(value)) { return default(TimeSpan); }

            var segments = value.Split(':');
            if( segments.Length >= 2)
            {
                int.TryParse(segments[0], out int hours);
                int.TryParse(segments[1], out int minutes);
                return new TimeSpan(hours, minutes, 0);
            }
            return new TimeSpan();
        }

        private string FormatTimeSpan(TimeSpan value) => $"{value.Hours}:{value.Minutes}";

         /// Extension method
        internal void EstimateAndSortWaitingListEntries()
        {
            if (WaitingList == null)
            {
                WaitingList = new List<WaitingListEntry>();
            }
 
            WaitingList.Sort(
                (left, right) => Math.Sign((left.Since - right.Since).Value.TotalMilliseconds));
 
            var previous = new WaitingListEntry
            {
                Estimated = DateTime.Today + OpeningTimeSpan,
                EstimatedDurationMinutes = 0
            };
 
            foreach (var entry in WaitingList)
            {
                entry.Estimated
                    = previous.Estimated
                    + TimeSpan.FromMinutes(previous.EstimatedDurationMinutes ?? 15);
 
                if (entry.Estimated < entry.Since)
                {
                    entry.Estimated = entry.Since;
                }
                previous = entry;
            }
        }

    }
}
